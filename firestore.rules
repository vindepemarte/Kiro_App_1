rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is a team member
    function isTeamMember(teamId, userId) {
      return exists(/databases/$(database)/documents/artifacts/$(appId)/teams/$(teamId)) &&
             userId in get(/databases/$(database)/documents/artifacts/$(appId)/teams/$(teamId)).data.members
               .filter(member => member.status in ['active', 'invited'])
               .map(member => member.userId);
    }
    
    // Helper function to check if user is team admin/creator
    function isTeamAdmin(teamId, userId) {
      let teamDoc = get(/databases/$(database)/documents/artifacts/$(appId)/teams/$(teamId));
      return exists(/databases/$(database)/documents/artifacts/$(appId)/teams/$(teamId)) &&
             (userId == teamDoc.data.createdBy ||
              userId in teamDoc.data.members
                .filter(member => member.role == 'admin' && member.status == 'active')
                .map(member => member.userId));
    }
    
    // ===== USER MEETINGS =====
    // Allow users to read and write their own meetings
    match /artifacts/{appId}/users/{userId}/meetings/{meetingId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow users to list their own meetings
    match /artifacts/{appId}/users/{userId}/meetings {
      allow read: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow team members to read team meetings
    match /artifacts/{appId}/users/{userId}/meetings/{meetingId} {
      allow read: if request.auth != null && 
        resource.data.teamId != null && 
        isTeamMember(resource.data.teamId, request.auth.uid);
    }
    
    // ===== TEAMS =====
    // Allow team members to read their teams
    match /artifacts/{appId}/teams/{teamId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.createdBy ||
         request.auth.uid in resource.data.members.map(['userId']));
    }
    
    // Allow authenticated users to create teams
    match /artifacts/{appId}/teams/{teamId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.createdBy &&
        request.resource.data.members.size() > 0 &&
        request.auth.uid in request.resource.data.members.map(['userId']);
    }
    
    // Allow team admins to update teams
    match /artifacts/{appId}/teams/{teamId} {
      allow update: if request.auth != null && 
        isTeamAdmin(teamId, request.auth.uid);
    }
    
    // Allow team creators to delete teams
    match /artifacts/{appId}/teams/{teamId} {
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
    }
    
    // Allow listing teams for team members (filtered queries)
    match /artifacts/{appId}/teams {
      allow read: if request.auth != null;
    }
    
    // ===== NOTIFICATIONS =====
    // Allow users to read their own notifications
    match /artifacts/{appId}/notifications/{notificationId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Allow users to update/delete their own notifications
    match /artifacts/{appId}/notifications/{notificationId} {
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Allow team admins to create notifications for team members
    match /artifacts/{appId}/notifications/{notificationId} {
      allow create: if request.auth != null && 
        (
          // Allow creating notifications for team invitations
          (request.resource.data.type == 'team_invitation' && 
           request.resource.data.data.teamId != null &&
           isTeamAdmin(request.resource.data.data.teamId, request.auth.uid)) ||
          // Allow creating notifications for meeting assignments
          (request.resource.data.type == 'meeting_assignment') ||
          // Allow creating notifications for task assignments
          (request.resource.data.type == 'task_assignment')
        );
    }
    
    // Allow users to query their own notifications
    match /artifacts/{appId}/notifications {
      allow read: if request.auth != null && 
        request.query.where.userId == request.auth.uid;
    }
    
    // ===== USER SEARCH =====
    // Allow authenticated users to search for other users (limited read access)
    match /artifacts/{appId}/users/{userId} {
      allow read: if request.auth != null;
    }
    
    // Allow users to create/update their own user profile
    match /artifacts/{appId}/users/{userId} {
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow listing users for search functionality
    match /artifacts/{appId}/users {
      allow read: if request.auth != null;
    }
    
    // ===== USER PROFILES =====
    // Allow users to read and write their own user profile
    match /artifacts/{appId}/userProfiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow team members to read basic profile info of other team members
    match /artifacts/{appId}/userProfiles/{userId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/artifacts/$(appId)/teams) &&
        // Check if both users are in at least one common team
        get(/databases/$(database)/documents/artifacts/$(appId)/teams).data.members
          .filter(member => member.userId == request.auth.uid).size() > 0 &&
        get(/databases/$(database)/documents/artifacts/$(appId)/teams).data.members
          .filter(member => member.userId == userId).size() > 0;
    }
    
    // Allow listing user profiles for team member lookups
    match /artifacts/{appId}/userProfiles {
      allow read: if request.auth != null;
    }
    
    // ===== TEAM MEETINGS =====
    // Allow team members to access team meetings collection
    match /artifacts/{appId}/teams/{teamId}/meetings/{meetingId} {
      allow read, write: if request.auth != null && 
        isTeamMember(teamId, request.auth.uid);
    }
    
    match /artifacts/{appId}/teams/{teamId}/meetings {
      allow read: if request.auth != null && 
        isTeamMember(teamId, request.auth.uid);
    }
    
    // ===== SECURITY FALLBACK =====
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}